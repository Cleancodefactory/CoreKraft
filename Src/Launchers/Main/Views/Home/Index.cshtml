@using Ccf.Ck.Libs.Web.Bundling
@using Ccf.Ck.Models.KraftModule
@using Ccf.Ck.Models.Settings
@using System.Threading
@using Ccf.Ck.Web.Middleware
@addTagHelper *, Ccf.Ck.Utilities.Profiling

@model KraftGlobalConfigurationSettings

@{ ViewData["Title"] = Model.GeneralSettings.DefaultStartModule; }

@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    @{
        if (Model.GeneralSettings.MetaTags != null && Model.GeneralSettings.MetaTags.Count > 0)
        {
            foreach (string metaTag in Model.GeneralSettings.MetaTags)
            {
                @Html.Raw(metaTag)
            }
        }
        else
        {
            <meta name="viewport" content="initial-scale=1.0, width=device-width">
        }
        if (Model.GeneralSettings.ProgressiveWebApp != null && !string.IsNullOrEmpty(Model.GeneralSettings.ProgressiveWebApp.Manifest))
        {
            <link rel="manifest" href="@Model.GeneralSettings.ProgressiveWebApp.Manifest">
            if (System.IO.File.Exists(System.IO.Path.Combine(Model.EnvironmentSettings.WebRootPath, "manifest/icon_152x152.png")))
            {
                <link rel="apple-touch-icon" href='@Url.Content("~/manifest/icon_152x152.png")' />
            }
        }
    }

    <title>@ViewData["Title"]</title>
    @BundleCollection.Instance.Profile(Model.GeneralSettings.DefaultStartModule).KraftStyles(string.IsNullOrWhiteSpace(Model.GeneralSettings.Theme) ? "Module.dep" : Model.GeneralSettings.Theme + ".dep").Render()
</head>
<body>
    <div id="t" class="themed">
    </div>
    @{
        var bindKraftConfiguration = Html.Raw(Model.GeneralSettings.BindKraftConfiguration);
        int isDevelopment = Model.EnvironmentSettings.IsDevelopment() ? 1 : 0;
    }
    <script type="text/javascript">
        //global base path
        g_ApplicationBasePath = "@Url.Content("~/")";
        g_ApplicationCulture = "@Thread.CurrentThread.CurrentCulture.IetfLanguageTag";
        g_BindKraftConfiguration = @bindKraftConfiguration;
        g_BindKraftConfiguration.IsDevelopment = @(isDevelopment);
        g_BindKraftConfiguration.ParseTimeErrorHandler = null;
        @{ if (isDevelopment == 0)
            {
                <text>
                    var errorShown = false;
                    g_BindKraftConfiguration.ParseTimeErrorHandler = function(message, source, lineno, colno, error) {
                        if (errorShown) return false;
                        errorShown = true;
                        window.location = g_ApplicationBasePath + "home/unsupported";
                        return false;
                    };

                    window.onerror = g_BindKraftConfiguration.ParseTimeErrorHandler;
                </text>
            }
        }
    </script>
    @{
        ToolSettings tool = KraftToolsRouteBuilder.GetTool(Model, "profiler");
        if (tool != null && tool.Enabled)//Profiler enabled enabled from configuration
        {
            <kraft-profiler />
        }
    }
    @BundleCollection.Instance.Profile(Model.GeneralSettings.DefaultStartModule).KraftScripts().Render()
</body>
</html>






