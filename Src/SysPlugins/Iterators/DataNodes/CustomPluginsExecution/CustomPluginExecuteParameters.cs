using Ccf.Ck.SysPlugins.Interfaces;
using System.Collections.Generic;

namespace Ccf.Ck.SysPlugins.Iterators.DataNodes.CustomPluginsExecution
{
    public class CustomPluginExecuteParameters : Dictionary<string, object>, ICustomPluginExecuteParameters
    {
        public Dictionary<string, object> Row
        {
            get
            {
                if (this.ContainsKey("Row")) return this["Row"] as Dictionary<string, object>;
                return null;
            }
            set { this["Row"] = value as Dictionary<string, object>; }
        }
        public List<Dictionary<string, object>> Results
        {
            get
            {
                if (this.ContainsKey("Results")) return this["Results"] as List<Dictionary<string, object>>;
                return null;
            }
            set { this["Results"] = value as List<Dictionary<string, object>>; }
        }

        // Results generated by the context so far (select)
        public List<Dictionary<string, object>> Parents
        {
            get
            {
                if (this.ContainsKey("Parents")) return this["Parents"] as List<Dictionary<string, object>>;
                return null;
            }
            set { this["Parents"] = value as List<Dictionary<string, object>>; }
        }

        public string Path
        {
            get { return (this.ContainsKey("Path") ? this["Path"] as string : null); }
            set { this["Path"] = value as string; }
        }
        public string Phase
        {
            get { return (this.ContainsKey("Phase") ? this["Phase"] as string : null); }
            set { this["Phase"] = value as string; }
        }
        public string Action
        {
            get { return (this.ContainsKey("Action") ? this["Action"] as string : null); }
            set { this["Action"] = value as string; }
        }

        public string RowState
        {
            get { return (this.ContainsKey("RowState") ? this["RowState"] as string : null); }
            set { this["RowState"] = value as string; }
        }

        public string SqlStatement
        {
            get { return (this.ContainsKey("SqlStatement") ? this["SqlStatement"] as string : null); }
            set { this["SqlStatement"] = value as string; }
        }

        public string NodeKey
        {
            get { return (this.ContainsKey("NodeKey") ? this["NodeKey"] as string : null); }
            set { this["NodeKey"] = value as string; }
        }

        public IParametersContext NodeParameters { get; set; }

        public static CustomPluginExecuteParameters InitParameters(
            string phase,
            Dictionary<string, object> row,
            List<Dictionary<string, object>> results,
            List<Dictionary<string, object>> parents,
            string path,
            IParametersContext nodeParameters,
            string action,
            string nodeKey,
            string statement
            )
        {
            return new CustomPluginExecuteParameters()
            {
                Phase = phase,
                Row = row,
                Results = results,
                Parents = parents,
                Path = path,
                NodeParameters = nodeParameters,
                Action = action,
                NodeKey = nodeKey,
                SqlStatement = statement
            };
        }
    }
}
